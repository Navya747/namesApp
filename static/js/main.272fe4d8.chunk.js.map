{"version":3,"sources":["components/NameInput/NameInput.tsx","components/RandomName/RandomName.tsx","components/ListItem/ListItem.tsx","components/NamesList/NamesList.tsx","components/Card/Card.tsx","components/NamesApp/NamesApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NameInput","props","onSubmit","addName","className","type","value","placeholder","onChange","nameChange","RandomName","state","currentName","generateRandom","Math","floor","random","namesList","length","getName","name","setState","nameDisplay","this","onClick","disabled","Component","ListItem","deleteName","id","NamesList","list","map","key","Card","children","NamesApp","nameInput","event","target","preventDefault","trim","uuid","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.272fe4d8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './NameInput.css';\r\n\r\nconst NameInput: React.FC<NameInputProps> = ({props}) => {\r\n\r\n    return(\r\n        <form onSubmit={props.addName}>\r\n            <input\r\n                className={'NameInput-input'}\r\n                type={'text'}\r\n                value={props.value}\r\n                placeholder={'Enter Name'}\r\n                onChange={props.nameChange}\r\n            />\r\n            <input\r\n                className={'NameInput-button'}\r\n                type={'submit'}\r\n                value={'Add'}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\ninterface NameInputProps {\r\n    props: {\r\n        addName: any,\r\n        nameChange: any,\r\n        value: string,\r\n    }\r\n}\r\n\r\nexport default NameInput;","import React, {Component} from \"react\";\r\nimport './RandomName.css';\r\n\r\nclass RandomName extends Component<RandomNameProps, RandomNameState>{\r\n    state : RandomNameState = {\r\n        currentName: \"\"\r\n    };\r\n\r\n    public generateRandom = () : number => {\r\n        return  Math.floor(Math.random()*this.props.namesList.length);\r\n    };\r\n\r\n    public getName = () : void => {\r\n        let random = this.generateRandom();\r\n        let name = this.props.namesList[random].name;\r\n        while (name === this.state.currentName){\r\n            random = this.generateRandom();\r\n            name = this.props.namesList[random].name;\r\n        }\r\n        this.setState({currentName: name});\r\n    };\r\n\r\n    public render() : JSX.Element {\r\n        const nameDisplay = this.props.namesList.length < 2 ? (\r\n            <span>Please add at-least two names to generate random</span>\r\n        ) : (\r\n            <span className={'RandomName-name'}>{this.state.currentName}</span>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <button\r\n                    className={'RandomName-button'}\r\n                    onClick={this.getName}\r\n                    disabled={this.props.namesList.length < 2}\r\n                >\r\n                    Display Random Name\r\n                </button>\r\n                <p className={'RandomName-text'}>\r\n                    {nameDisplay}\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface RandomNameProps {\r\n    namesList: Array<List>;\r\n}\r\n\r\ninterface List {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\ninterface RandomNameState {\r\n    currentName: string;\r\n}\r\n\r\nexport default RandomName;","import React from \"react\";\r\nimport './ListItem.css';\r\n\r\nconst ListItem: React.FC<ListItemProps> = ({props}) => {\r\n\r\n    return(\r\n        <div className={'ListItem-list-item'}>\r\n            <span className={'ListItem-list-item-name'}>{props.name}</span>\r\n            <span className={'ListItem-list-item-btn'}>\r\n                <button className={'ListItem-button'} onClick={() => props.deleteName(props.id)}>Delete</button>\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface ListItemProps {\r\n    props: {\r\n        id: string;\r\n        name: string;\r\n        deleteName: any;\r\n    }\r\n}\r\n\r\nexport default ListItem;","import React from \"react\";\r\nimport './NamesList.css';\r\nimport ListItem from \"../ListItem/ListItem\";\r\n\r\nconst NamesList: React.FC<NamesListProps> = ({props}) => {\r\n\r\n    return(\r\n        <div className={'NamesList-names-list'}>\r\n            {props.list.map((name: List) => (\r\n                <ListItem key={name.id} props={{name: name.name, id: name.id, deleteName: props.deleteName}}/>\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface NamesListProps {\r\n    props: {\r\n        list: Array<List>;\r\n        deleteName: any;\r\n    }\r\n}\r\n\r\ninterface List {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport default NamesList;","import React from \"react\";\r\nimport './Card.css';\r\n\r\nconst Card: React.FC<CardProps> = ({children}) => {\r\n\r\n    return(\r\n        <div className={'Card'}>\r\n            {children}\r\n        </div>\r\n    );\r\n};\r\n\r\ninterface CardProps {}\r\n\r\nexport default Card;","import React, {Component} from \"react\";\r\nimport './NamesApp.css';\r\nimport uuid from \"uuid\";\r\nimport NameInput from \"../NameInput/NameInput\";\r\nimport RandomName from \"../RandomName/RandomName\";\r\nimport NamesList from \"../NamesList/NamesList\";\r\nimport Card from \"../Card/Card\";\r\n\r\nclass NamesApp extends Component<any, NamesAppState>{\r\n    state: NamesAppState = {\r\n        nameInput: \"\",\r\n        namesList: []\r\n    };\r\n\r\n    public nameChange = (event: any) : void => {\r\n        this.setState({\r\n            nameInput: event.target.value,\r\n        })\r\n    };\r\n\r\n    public addName = (event: React.FormEvent<HTMLFormElement>) : void => {\r\n        event.preventDefault();\r\n        if (this.state.nameInput.trim() !== \"\"){\r\n            this.setState({\r\n                namesList: [...this.state.namesList, {id: uuid(), name: this.state.nameInput}],\r\n            });\r\n        }\r\n        this.setState({\r\n            nameInput: \"\",\r\n        });\r\n    };\r\n\r\n    public deleteName = (id: string) : void => {\r\n        this.setState({\r\n            namesList: this.state.namesList.filter(name => name.id !== id)\r\n        });\r\n    };\r\n\r\n    public render() : JSX.Element {\r\n        return (\r\n            <div className={'NamesApp'}>\r\n                <div className={'NamesApp-input-card'}>\r\n                    <Card>\r\n                        <NameInput\r\n                            props={{\r\n                                addName: this.addName,\r\n                                nameChange: this.nameChange,\r\n                                value: this.state.nameInput\r\n                            }}\r\n                        />\r\n                        <NamesList props={{list: this.state.namesList, deleteName: this.deleteName}}/>\r\n                    </Card>\r\n                </div>\r\n                <div className={'NamesApp-display-card'}>\r\n                    <Card>\r\n                        <RandomName namesList={this.state.namesList}/>\r\n                    </Card>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface NamesAppState {\r\n    nameInput: string;\r\n    namesList: Array<List>;\r\n}\r\n\r\ninterface List {\r\n    id: string;\r\n    name: string;\r\n}\r\n\r\nexport default NamesApp;","import React from 'react';\nimport NamesApp from \"./components/NamesApp/NamesApp\";\n\nfunction App() {\n  return <NamesApp/>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}